server:
  port: 10002

spring:
  datasource:                                           # 数据源的相关配置
    # 拆分数据源到独立database instance，或者独立schema
#    url: jdbc:mysql://localhost:3306/foodie-cloud-item?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true
   # url: jdbc:mysql://localhost:3306/jiagou?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf-8
    url: ${mariadb.url}
    username: ${mariadb.username}
    password: ${mariadb.password}
  #  password: 123456
  redis:
    # Redis 单机单实例
    database: 0
    host: 152.136.125.49
    port: 6379
    password: cnh123
    # 链路追踪
    zipkin:
      discoveryClientEnabled: true
      base-url: http://ZIPKIN-SERVER/
      locator:
        discovery:
          enabled: true
      # 以HTTP上传数据到Zipkin
      # WHY? bus依赖项导入了rabbitmq的依赖项，zipkin会默认使用mq
      sender:
        type: web
    sleuth:
      sampler:
        probability: 1
    ### 推送变更的时候用,还没有集成进来
#    rabbitmq:
#      host: localhost
#      port: 5672
#      username: guest
#      password: guest

    # Redis 哨兵模式
#    database: 1
#    password: imooc
#    sentinel:
#      master: imooc-master
#      nodes: 192.168.1.191:26379,192.168.1.192:26379,192.168.1.193:26379
    # Redis 集群模式
#    password: imooc
#    cluster:
#      nodes: 192.168.1.201:6379,192.168.1.202:6379,192.168.1.203:6379,192.168.1.204:6379,192.168.1.205:6379,192.168.1.206:6379

mybatis:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

## 开启所有actuator-endpoint
management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: '*'
  #        include: health, info, xxxx
  security:
    enabled: false

hystrix:
  command:
    # 有的属性是默认值，写不写都行
    default:
      fallback:
        enabled: true
      circuitBreaker:
        enabled: true
        # 超过50%错误，那么开启熔断
        errorThresholdPercentage: 50
        # 5个request之后才进行统计
        requestVolumeThreshold: 5
        # 10秒之后进入半开状态
        sleepWindowInMilliseconds: 10000
        # forceClosed, forceOpen 强制关闭/开启熔断开关
      execution:
        timeout:
          enabled: true
        # 可以指定隔离方式是线程池还是信号量
        isolation:
          thread:
            interruptOnTimeout: true
            interruptOnFutureCancel: true
            timeoutInMilliseconds: 10000
      metrics:
        rollingStats:
          # 时间窗口统计
          timeInMilliseconds: 20000
          # numBuckets: 10
    #        rollingPercentile:
    #          # 时间窗口统计
    #          timeInMilliseconds: 20000
    #          # numBuckets: 10
    #          bucketSize: 300
    # 照这个方法，覆盖其他的属性
    loginFail:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 3000
